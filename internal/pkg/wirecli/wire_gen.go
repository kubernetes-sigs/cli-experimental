// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wirecli

import (
	"io"
	"sigs.k8s.io/cli-experimental/internal/pkg/apply"
	"sigs.k8s.io/cli-experimental/internal/pkg/clik8s"
	"sigs.k8s.io/cli-experimental/internal/pkg/status"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wiregit"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func InitializeStatus(resourceConfigPath clik8s.ResourceConfigPath, writer io.Writer) (*status.Status, error) {
	pluginConfig := wirek8s.NewPluginConfig()
	factory := wirek8s.NewResMapFactory(pluginConfig)
	fileSystem := wirek8s.NewFileSystem()
	transformerFactory := wirek8s.NewTransformerFactory()
	configProvider := wirek8s.NewConfigProvider(factory, fileSystem, transformerFactory, pluginConfig)
	resourceConfigs, err := wirek8s.NewResourceConfig(resourceConfigPath, configProvider)
	if err != nil {
		return nil, err
	}
	masterURL := wirek8s.NewMasterFlag()
	kubeConfigPath := wirek8s.NewKubeConfigPathFlag()
	config, err := wirek8s.NewRestConfig(masterURL, kubeConfigPath)
	if err != nil {
		return nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return nil, err
	}
	repository := wiregit.NewOptionalRepository(resourceConfigPath)
	commitIter := wiregit.NewOptionalCommitIter(repository)
	commit := wiregit.NewOptionalCommit(commitIter)
	statusStatus := &status.Status{
		Resources: resourceConfigs,
		Out:       writer,
		Clientset: clientset,
		Commit:    commit,
	}
	return statusStatus, nil
}

func InitializeApply(resourceConfigPath clik8s.ResourceConfigPath, writer io.Writer) (*apply.Apply, error) {
	masterURL := wirek8s.NewMasterFlag()
	kubeConfigPath := wirek8s.NewKubeConfigPathFlag()
	config, err := wirek8s.NewRestConfig(masterURL, kubeConfigPath)
	if err != nil {
		return nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return nil, err
	}
	pluginConfig := wirek8s.NewPluginConfig()
	factory := wirek8s.NewResMapFactory(pluginConfig)
	fileSystem := wirek8s.NewFileSystem()
	transformerFactory := wirek8s.NewTransformerFactory()
	configProvider := wirek8s.NewConfigProvider(factory, fileSystem, transformerFactory, pluginConfig)
	resourceConfigs, err := wirek8s.NewResourceConfig(resourceConfigPath, configProvider)
	if err != nil {
		return nil, err
	}
	repository := wiregit.NewOptionalRepository(resourceConfigPath)
	commitIter := wiregit.NewOptionalCommitIter(repository)
	commit := wiregit.NewOptionalCommit(commitIter)
	applyApply := &apply.Apply{
		Clientset: clientset,
		Out:       writer,
		Resources: resourceConfigs,
		Commit:    commit,
	}
	return applyApply, nil
}

func DoStatus(resourceConfigPath clik8s.ResourceConfigPath, writer io.Writer) (status.Result, error) {
	pluginConfig := wirek8s.NewPluginConfig()
	factory := wirek8s.NewResMapFactory(pluginConfig)
	fileSystem := wirek8s.NewFileSystem()
	transformerFactory := wirek8s.NewTransformerFactory()
	configProvider := wirek8s.NewConfigProvider(factory, fileSystem, transformerFactory, pluginConfig)
	resourceConfigs, err := wirek8s.NewResourceConfig(resourceConfigPath, configProvider)
	if err != nil {
		return status.Result{}, err
	}
	masterURL := wirek8s.NewMasterFlag()
	kubeConfigPath := wirek8s.NewKubeConfigPathFlag()
	config, err := wirek8s.NewRestConfig(masterURL, kubeConfigPath)
	if err != nil {
		return status.Result{}, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return status.Result{}, err
	}
	repository := wiregit.NewOptionalRepository(resourceConfigPath)
	commitIter := wiregit.NewOptionalCommitIter(repository)
	commit := wiregit.NewOptionalCommit(commitIter)
	statusStatus := &status.Status{
		Resources: resourceConfigs,
		Out:       writer,
		Clientset: clientset,
		Commit:    commit,
	}
	result, err := NewStatusCommandResult(statusStatus, writer)
	if err != nil {
		return status.Result{}, err
	}
	return result, nil
}

func DoApply(resourceConfigPath clik8s.ResourceConfigPath, writer io.Writer) (apply.Result, error) {
	masterURL := wirek8s.NewMasterFlag()
	kubeConfigPath := wirek8s.NewKubeConfigPathFlag()
	config, err := wirek8s.NewRestConfig(masterURL, kubeConfigPath)
	if err != nil {
		return apply.Result{}, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return apply.Result{}, err
	}
	pluginConfig := wirek8s.NewPluginConfig()
	factory := wirek8s.NewResMapFactory(pluginConfig)
	fileSystem := wirek8s.NewFileSystem()
	transformerFactory := wirek8s.NewTransformerFactory()
	configProvider := wirek8s.NewConfigProvider(factory, fileSystem, transformerFactory, pluginConfig)
	resourceConfigs, err := wirek8s.NewResourceConfig(resourceConfigPath, configProvider)
	if err != nil {
		return apply.Result{}, err
	}
	repository := wiregit.NewOptionalRepository(resourceConfigPath)
	commitIter := wiregit.NewOptionalCommitIter(repository)
	commit := wiregit.NewOptionalCommit(commitIter)
	applyApply := &apply.Apply{
		Clientset: clientset,
		Out:       writer,
		Resources: resourceConfigs,
		Commit:    commit,
	}
	result, err := NewApplyCommandResult(applyApply, writer)
	if err != nil {
		return apply.Result{}, err
	}
	return result, nil
}

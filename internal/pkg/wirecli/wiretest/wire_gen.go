// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wiretest

import (
	"gopkg.in/src-d/go-git.v4/plumbing/object"
	"io"
	"sigs.k8s.io/cli-experimental/internal/pkg/apply"
	"sigs.k8s.io/cli-experimental/internal/pkg/clik8s"
	"sigs.k8s.io/cli-experimental/internal/pkg/resourceconfig"
	"sigs.k8s.io/cli-experimental/internal/pkg/status"
	"sigs.k8s.io/cli-experimental/internal/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func InitializeStatus(resourceConfigs clik8s.ResourceConfigs, commit *object.Commit, writer io.Writer) (*status.Status, func(), error) {
	config, cleanup, err := NewRestConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	statusStatus := &status.Status{
		Resources: resourceConfigs,
		Out:       writer,
		Clientset: clientset,
		Commit:    commit,
	}
	return statusStatus, func() {
		cleanup()
	}, nil
}

func InitializeApply(resourceConfigs clik8s.ResourceConfigs, commit *object.Commit, writer io.Writer) (*apply.Apply, func(), error) {
	config, cleanup, err := NewRestConfig()
	if err != nil {
		return nil, nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	applyApply := &apply.Apply{
		Clientset: clientset,
		Out:       writer,
		Resources: resourceConfigs,
		Commit:    commit,
	}
	return applyApply, func() {
		cleanup()
	}, nil
}

func InitializConfigProvider() resourceconfig.ConfigProvider {
	pluginConfig := wirek8s.NewPluginConfig()
	factory := wirek8s.NewResMapFactory(pluginConfig)
	fileSystem := wirek8s.NewFileSystem()
	transformerFactory := wirek8s.NewTransformerFactory()
	configProvider := wirek8s.NewConfigProvider(factory, fileSystem, transformerFactory, pluginConfig)
	return configProvider
}
